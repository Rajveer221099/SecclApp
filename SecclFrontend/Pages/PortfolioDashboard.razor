@page "/portfolio-dashboard"
@using SecclShared.Models
@using SecclFrontend.Pages
@inject HttpClient Http
@inject AppState AppState

<link href="css/app.css" rel="stylesheet" />

<div class="container-fluid min-vh-100 d-flex flex-column align-items-center justify-content-center fade-in">
    <div class="dashboard-header text-center mb-4 w-100 d-flex flex-column align-items-center justify-content-center">
        <h1 class="display-3 fw-bold text-gradient mb-2">Portfolio Dashboard</h1>
        <hr class="w-50 mx-auto mb-4" style="border-top: 3px solid #007bff; border-radius: 2px;" />
    </div>
    <div class="dashboard-container w-100 d-flex flex-column align-items-center justify-content-center" style="max-width: 900px;">
        <div class="input-container mb-4">
            <input type="text" @bind="ClientIdsInput" placeholder="Enter client IDs separated by commas" class="form-control form-control-lg shadow-sm" />
            <button @onclick="FetchAggregatedData" disabled="@AppState.IsLoading" class="btn btn-gradient btn-lg d-flex align-items-center gap-2">
                <span class="bi bi-bar-chart"></span> Fetch Data
            </button>
        </div>
        @if (AppState.IsLoading)
        {
            <div class="overlay-loader">
                <div class="custom-loader"></div>
            </div>
        }
        <div class="total-value mb-4 animated-fadein">
            <h4>Total Portfolio Value</h4>
            <p class="value-display">@FormatValue(AppState.TotalValue)</p>
        </div>
        <div class="account-type-card mb-4 animated-fadein">
            <h4 class="mb-3">Aggregated Totals by Account Types</h4>
            <AccountTypeTable AggregatedTotals="@AppState.AggregatedTotals" />
        </div>
        <div class="client-section mt-4 text-center">
            <button class="btn btn-outline-primary btn-lg d-flex align-items-center gap-2 mx-auto" @onclick="ToggleClientList" disabled="@AppState.IsLoadingClients">
                <span class="bi bi-people"></span> List All Clients
            </button>
            @if (AppState.IsLoadingClients)
            {
                <div class="mt-3 d-flex justify-content-center">
                    <div class="custom-loader"></div>
                </div>
            }
            @if (AppState.IsClientListVisible)
            {
                <div class="client-popup animated-fadein">
                    <div class="popup-header">
                        <h4>Available Clients</h4>
                        <button class="btn-close" @onclick="ToggleClientList">&times;</button>
                    </div>
                    <div class="popup-body">
                        <ClientList Clients="@AppState.Clients" IsLoading="@AppState.IsLoadingClients" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string ClientIdsInput = string.Empty;

    private async Task FetchAggregatedData()
    {
        if (string.IsNullOrWhiteSpace(ClientIdsInput))
        {
            Console.WriteLine("Client IDs input is empty.");
            return;
        }

        AppState.IsLoading = true;
        var clientIds = ClientIdsInput.Split(',').Select(id => id.Trim()).ToArray();

        try
        {
            // Use the new batch endpoint for aggregation
            var response = await Http.PostAsJsonAsync("api/portfolio/batch-aggregated-data", clientIds);
            if (response.IsSuccessStatusCode)
            {
                var batchResult = await response.Content.ReadFromJsonAsync<BatchAggregatedDataResult>();
                if (batchResult != null)
                {
                    AppState.TotalValue = batchResult.TotalValue;
                    AppState.AggregatedTotals = batchResult.AggregatedTotals;
                }
            }
            else
            {
                // fallback to old endpoints if needed
                var totalResponse = await Http.GetFromJsonAsync<TotalValueResponse>($"api/portfolio/aggregated-total?clientIds={string.Join(",", clientIds)}");
                if (totalResponse != null)
                {
                    AppState.TotalValue = totalResponse.TotalValue;
                }
                AppState.AggregatedTotals = await Http.GetFromJsonAsync<Dictionary<string, decimal>>($"api/portfolio/aggregated-by-account-type?clientIds={string.Join(",", clientIds)}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            AppState.IsLoading = false;
        }
    }

    private async Task ToggleClientList()
    {
        AppState.IsClientListVisible = !AppState.IsClientListVisible;
        if (AppState.IsClientListVisible && (AppState.Clients == null || !AppState.Clients.Any()))
        {
            AppState.IsLoadingClients = true;
            try
            {
                AppState.Clients = await Http.GetFromJsonAsync<List<Client>>("api/portfolio/clients");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching clients: {ex.Message}");
            }
            finally
            {
                AppState.IsLoadingClients = false;
            }
        }
    }

    private string FormatValue(decimal value)
    {
        if (value >= 1_000_000_000)
        {
            return $"₹{(value / 1_000_000_000):0.##}B";
        }
        else if (value >= 1_000_000)
        {
            return $"₹{(value / 1_000_000):0.##}M";
        }
        else if (value >= 1_000)
        {
            return $"₹{(value / 1_000):0.##}K";
        }
        else
        {
            return $"₹{value:0.##}";
        }
    }

    public class TotalValueResponse
    {
        public decimal TotalValue { get; set; }
    }

    private class BatchAggregatedDataResult
    {
        public decimal TotalValue { get; set; }
        public Dictionary<string, decimal> AggregatedTotals { get; set; }
    }
}